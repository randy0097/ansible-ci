- name: create remote temp dir
  file: 
    path: "{{remote_temp}}"
    state: directory 
- name: get module name
  command: chdir={{manager_module_dir}} grep <artifactId>  pom.xml -m 1
  register: module_name_origin
- name: get module version
  command: chdir={{manager_module_dir}} grep <version>  pom.xml -m 1
  register: module_version_origin    
- name: clean old remote war
  file: 
    path: "{{remote_temp}}/{{manager_war_name}}"
    state: absent 
- name: copy war to remote
  copy: 
    src: "{{build_dir_env}}/{{manager_war_name}}"
    dest: "{{remote_temp}}/{{manager_war_name}}"
- name: clean old project folder
  file: 
    path: "{{manager_tomcat_dir}}/webapps/{{manager_deploy_name}}"
    state: absent    
- name: create deploy folder
  file: 
    path: "{{manager_tomcat_dir}}/webapps/{{manager_deploy_name}}"
    state: directory     
- name: deploy to tomcat
  unarchive:
    src: "{{remote_temp}}/{{manager_war_name}}"
    dest: "{{manager_tomcat_dir}}/webapps/{{manager_deploy_name}}"
    remote_src: yes

# - name: set spring.profiles.active
#   command: sed -i "s/spring.profiles.active={{spring_profiles_active_old}}/spring.profiles.active={{spring_profiles_active}}/g" {{manager_tomcat_dir}}/webapps/{{manager_deploy_name}}/WEB-INF/classes/application.properties

# - name: set tomcat env parameters
#   shell: echo JAVA_OPTS=\"-Dspring.profiles.active={{spring_profiles_active}}\"  > {{cas_tomcat_dir}}/bin/setenv.sh

- name: restart licenseManager tomcat
  command: docker service update --force {{env}}_tomcat_licenseManager